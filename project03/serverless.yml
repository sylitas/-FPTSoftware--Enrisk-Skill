org: sylitas
app: project03
service: project03
frameworkVersion: '3'

plugins:
  - serverless-offline

custom:
  dynamoDBConfig:
    tableName:
      usersTable: 'users-table-${sls:stage}'
      productsTable: 'products-table-${sls:stage}'
      ordersTable: 'orders-table-${sls:stage}'
    indexName:
      usersTableEmailIndex: usersTable-email-index
      productsTableUserIdIndex: productsTable-userId-index
      ordersTableUserIdIndex: ordersTable-userId-index

  arnPrefixes:
    dynamodb: !Join
      - ':'
      - - arn
        - !Ref AWS::Partition
        - dynamodb
        - !Ref AWS::Region
        - !Ref AWS::AccountId
        - table

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Sid: Dynamodb
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !Join
              - '/'
              - - '${self:custom.arnPrefixes.dynamodb}'
                - '${self:custom.dynamoDBConfig.tableName.usersTable}*'
            - !Join
              - '/'
              - - '${self:custom.arnPrefixes.dynamodb}'
                - '${self:custom.dynamoDBConfig.tableName.productsTable}*'
            - !Join
              - '/'
              - - '${self:custom.arnPrefixes.dynamodb}'
                - '${self:custom.dynamoDBConfig.tableName.ordersTable}*'
        - Effect: Allow
          Sid: Cognito
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:ForgotPassword
          Resource: '*'
        - Effect: Allow
          Sid: SES
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'
  environment:
    ConfigLimit: 10mb
    Currency: VND
    # product - dynamodb
    productsTableName: ${self:custom.dynamoDBConfig.tableName.productsTable}
    productsTableIndexUserId: ${self:custom.dynamoDBConfig.indexName.productsTableUserIdIndex}
    # orders - dynamodb
    ordersTableName: ${self:custom.dynamoDBConfig.tableName.ordersTable}
    ordersTableIndexUserId: ${self:custom.dynamoDBConfig.indexName.ordersTableUserIdIndex}
    # users - dynamodb
    usersTableName: ${self:custom.dynamoDBConfig.tableName.usersTable}
    usersTableIndexEmail: ${self:custom.dynamoDBConfig.indexName.usersTableEmailIndex}
    # cognito
    userPoolId: { Ref: UserPool }
    userClientId: { Ref: UserClient }

functions:
  accountManagement:
    name: accountManagementLambda
    handler: dist/accountManagement.handler
    events:
      - http: &NoAuthorize
          path: 'signUp'
          method: post
          cors: true
      - http:
          <<: *NoAuthorize
          path: 'signIn'
      - http:
          <<: *NoAuthorize
          path: 'forgotPassword'
      - http:
          <<: *NoAuthorize
          path: 'confirmPassword'

  shoppingTime:
    name: shoppingTimeLambda
    handler: dist/handler.handler
    events:
      - http: &HasAuthorize
          path: 'user'
          method: any
          cors: true
          authorizer:
            name: shoppingTimeAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: [UserPool, Arn]
            claims:
              - email
      - http:
          <<: *HasAuthorize
          path: 'product'
      - http:
          <<: *HasAuthorize
          path: 'product/{proxy+}'
      - http:
          <<: *HasAuthorize
          path: 'order'
      - http:
          <<: *NoAuthorize
          path: 'documentation'
          method: get

resources:
  Resources:
    # Cognito
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: shoppingTime-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: shopping-time-user-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 12
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'

    # DynamoDB
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDBConfig.tableName.usersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDBConfig.indexName.usersTableEmailIndex}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDBConfig.tableName.productsTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDBConfig.indexName.productsTableUserIdIndex}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDBConfig.tableName.ordersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDBConfig.indexName.ordersTableUserIdIndex}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
